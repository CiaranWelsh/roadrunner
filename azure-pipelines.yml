# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
name: $(Date:yyyyMMdd)$(Rev:.r)
trigger:
  - master
  - develop
  - azure-tests

pr:
  - master
  - develop
  - azure-tests

stages:
  - stage: BuildRoadrunner
    jobs:
      - job: BuildRoadrunnerLinux
        displayName: Linux
        continueOnError: "false"
        pool:
          vmImage: "ubuntu-18.04"

        strategy:
          matrix:
            64-bit Linux Release:
              BuildType: Release
              SelfHost: false
              CMakeArgs: "-DCMAKE_INSTALL_PREFIX=../install-azure-release"
            64-bit Linux Debug:
              BuildType: Debug
              SelfHost: false
              CMakeArgs: "-DCMAKE_INSTALL_PREFIX=../install-azure-debug"

        steps:
          - script: |
              echo "current driectory is: "
              pwd
              echo "doing ls"
              ls -lh
              wget https://github.com/sys-bio/llvm-6.x/releases/download/release%2F6.x/llvm-6.x-gcc7.5.0-x64-release.tar.gz
              tar -zxvf llvm-6.x-gcc7.5.0-x64-release.tar.gz
              ls
          - script: |
              echo "current driectory is: "
              pwd
              echo "doing ls"
              ls -lh
              wget https://github.com/CiaranWelsh/roadrunner-deps/releases/download/v2.0.1/roadrunner-deps-gcc7.5-x64-release.tar.gz
              tar -zxvf roadrunner-deps-gcc7.5-x64-release.tar.gz
              ls
          - task: CMake@1
            displayName: ConfigureCommand
            inputs:
              cmakeArgs: $(CMakeArgs) -DRR_DEPENDENCIES_INSTALL_PREFIX="../roadrunner-deps-gcc7.5-x64-release" -DLLVM_INSTALL_PREFIX="../llvm-6.x-gcc7.5.0-x64-release" -DCMAKE_BUILD_TYPE=$(BuildType) -DBUILD_TESTS=ON ..
          - task: CMake@1
            displayName: BuildCommand
            inputs:
              cmakeArgs: --build . --target install --config $(BuildType) -j 12
          - script: |
              echo "Doing ls from $(pwd)"
              ls -lh
              ctest build

      - job: BuildRoadrunnerWindows
        displayName: Windows
        continueOnError: "false"
        pool:
          vmImage: "windows-2019"

        strategy:
          matrix:
            64-bit Windows Release:
              BuildType: Release
              SelfHost: false
              CMakeArgs: "-DCMAKE_INSTALL_PREFIX=../install-azure-release"
              llvm_link: https://github.com/sys-bio/llvm-6.x/releases/download/release%2F6.x/llvm-6.x-msvc2019-x64-release.zip
              llvm_zip: llvm-6.x-msvc2019-x64-release.zip
              llvm_install: llvm-6.x-msvc2019-x64-release
              rr_deps_link: https://github.com/CiaranWelsh/roadrunner-deps/releases/download/v2.0.1/roadrunner_deps-msvc2019-x64-release.zip
              rr_deps_zip: roadrunner_deps-msvc2019-x64-release.zip
              rr_deps_install: roadrunner_deps-msvc2019-x64-release
#            64-bit Windows Debug:
#              BuildType: Debug
#              SelfHost: false
#              CMakeArgs: "-DCMAKE_INSTALL_PREFIX=../install-azure-debug"

        steps:
          - powershell: |
              echo "current driectory is: "
              pwd
              echo "doing ls"
              ls
              Invoke-WebRequest -InFile $(llvm_link) -OutFile $(llvm_zip)
              Expand-Archive -LiteralPath '$(llvm_zip)' -DestinationPath '$(llvm_install)'
              ls
          - powershell: |
              echo "current driectory is: "
              pwd
              echo "doing ls"
              ls
              Invoke-WebRequest -InFile $(rr_deps_link) -OutFile $(rr_deps_zip)
              Expand-Archive -LiteralPath '$(rr_deps_zip)' -DestinationPath '$(rr_deps_install)'
              ls
          - task: CMake@1
            displayName: ConfigureCommand
            inputs:
              cmakeArgs: $(CMakeArgs) -DRR_DEPENDENCIES_INSTALL_PREFIX="../$(rr_deps_install)" -DLLVM_INSTALL_PREFIX="../$(llvm_install)" -DCMAKE_BUILD_TYPE=$(BuildType) -DBUILD_TESTS=ON ..
          - task: CMake@1
            displayName: BuildCommand
            inputs:
              cmakeArgs: --build . --target install --config $(BuildType) -j 12
          - script: |
              echo "Doing ls from $(pwd)"
              ls -lh
              ctest build

      - job: BuildRoadrunnerMac
        pool:
          vmImage: 'macOS-10.15'

        strategy:
          matrix:
            64-bit Mac Release:
              BuildType: Release
              SelfHost: false
              CMakeArgs: "-DCMAKE_INSTALL_PREFIX=../install-azure-release"
              llvm_link: https://github.com/sys-bio/llvm-6.x/releases/download/release%2F6.x/llvm-6.x-macos-x64-release.zip
              llvm_zip: llvm-6.x-macos-x64-release.zip
              llvm_install: llvm-6.x-macos-x64-release
              rr_deps_link: https://github.com/CiaranWelsh/roadrunner-deps/releases/download/v2.0.1/libroadrunner-deps-mac-x64-release.zip
              rr_deps_zip: libroadrunner-deps-mac-x64-release.zip
              rr_deps_install: libroadrunner-deps-mac-x64-release

        steps:
          - script: |
              echo "current driectory is: "
              pwd
              echo "doing ls"
              ls -lh
              wget $(llvm_link)
              tar -zxvf $(llvm_zip)
              ls
          - script: |
              echo "current driectory is: "
              pwd
              echo "doing ls"
              ls -lh
              wget $(rr_deps_link)
              tar -zxvf $(rr_deps_zip)
              ls
          - task: CMake@1
            displayName: ConfigureCommand
            inputs:
              cmakeArgs: $(CMakeArgs) -DRR_DEPENDENCIES_INSTALL_PREFIX="../$(rr_deps_install)" -DLLVM_INSTALL_PREFIX="../$(llvm_install)" -DCMAKE_BUILD_TYPE=$(BuildType) -DBUILD_TESTS=ON ..
          - task: CMake@1
            displayName: BuildCommand
            inputs:
              cmakeArgs: --build . --target install --config $(BuildType) -j 12
          - script: |
              echo "Doing ls from $(pwd)"
              ls -lh
              ctest build

